function [Results] = TrainMyANN(Inputs, Outputs)
% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app

if ~isempty(Inputs)
    
    % Choose a Training Function
    % For a list of all training functions type: help nntrain
    % 'trainlm' is usually fastest.
    % 'trainbr' takes longer but may be better for challenging problems.
    % 'trainscg' uses less memory. Suitable in low memory situations.
    trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.
    
    % Create a Fitting Network
    hiddenLayerSize = 10;
    net = fitnet(hiddenLayerSize,trainFcn);
    
    % Choose Input and Output Pre/Post-Processing Functions
    % For a list of all processing functions type: help nnprocess
    net.input.processFcns = {'removeconstantrows','mapminmax'};
    net.output.processFcns = {'removeconstantrows','mapminmax'};
    
    % Setup Division of Data for Training, Validation, Testing
    % For a list of all data division functions type: help nndivision
    net.divideFcn = 'dividerand';  % Divide data randomly
    net.divideMode = 'sample';  % Divide up every sample
    net.divideParam.trainRatio = 70/100;
    net.divideParam.valRatio = 15/100;
    net.divideParam.testRatio = 15/100;
    
    % Choose a Performance Function
    % For a list of all performance functions type: help nnperformance
    net.performFcn = 'mse';  % Mean Squared Error
    
    % Choose IF Want to See Training Window
    net.trainParam.showWindow = true;
    
    % Choose Plot Functions
    % For a list of all plot functions type: help nnplot
    net.plotFcns = {};
    %     net.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
    %         'plotregression', 'plotfit'};
    
    % Train the Network
    [net,tr] = train(net,Inputs,Outputs);
    
    % Test the Network
    y_hat = net(Inputs);
    e = gsubtract(Outputs,y_hat);
    performance = perform(net,Outputs, y_hat);
else
    y_hat = inf(size(Outputs));
    e = inf(size(Outputs));
    performance = inf;
    
    tr.trainInd = [];
    tr.valInd = [];
    tr.testInd = [];
end

% Record All Data
Data.Inputs = Inputs;
Data.Outputs = Outputs;
Data.y_hat = y_hat;
Data.e = e;
Data.Perf = performance;

% Record Train Data
TrainData.Inputs = Inputs(:,tr.trainInd);
TrainData.Outputs = Outputs(:,tr.trainInd);
TrainData.y_hat = y_hat(:,tr.trainInd);
TrainData.e = e(:,tr.trainInd);
if ~isempty(Inputs)
    TrainData.Perf = perform(net, TrainData.Outputs, TrainData.y_hat);
else
    TrainData.Perf = inf;
end

% Record Validation and Test Data
TestData.Inputs = Inputs(:,[tr.testInd tr.valInd]);
TestData.Outputs = Outputs(:,[tr.testInd tr.valInd]);
TestData.y_hat = y_hat(:,[tr.testInd tr.valInd]);
TestData.e = e(:,[tr.testInd tr.valInd]);
if ~isempty(Inputs)
    TestData.Perf = perform(net, TestData.Outputs, TestData.y_hat);
else
    TestData.Perf = inf;
end

% Return Results
Results.Data = Data;
Results.TrainData = TrainData;
Results.TestData = TestData;
if ~isempty(Inputs)
    Results.net = net;
else
    Results.net = [];
end

% View the Network
% view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)
end
