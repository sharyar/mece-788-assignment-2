function [ObjValue] = SequentialFeatureSelection( ...
    Input_tr, Output_tr, Input_test, Output_test)
% This Function Calculates the Objective Value for Sequential Feature Selection 
% For Each Set of Feature, A ANN Will be Trained and Tested

% Train and Test a ANN
ObjValue = TrainMyANN(Input_tr', Output_tr', Input_test', Output_test');
end

function [Performance] = TrainMyANN(Input_tr, Output_tr, Input_test, Output_test)
% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

% Create a Fitting Network
hiddenLayerSize = 10;
net = fitnet(hiddenLayerSize,trainFcn);

% Choose Input and Output Pre/Post-Processing Functions
% For a list of all processing functions type: help nnprocess
net.input.processFcns = {'removeconstantrows','mapminmax'};
net.output.processFcns = {'removeconstantrows','mapminmax'};

% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivision
net.divideFcn = 'dividerand';  % Divide data randomly
net.divideMode = 'sample';  % Divide up every sample
net.divideParam.trainRatio = 100/100;
net.divideParam.valRatio = 0/100;
net.divideParam.testRatio = 0/100;

% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
net.performFcn = 'mse';  % Mean Squared Error

% Choose IF Want to See Training Window
net.trainParam.showWindow = true;

% Choose Plot Functions
% For a list of all plot functions type: help nnplot
net.plotFcns = {};
%     net.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
%         'plotregression', 'plotfit'};

% Train the Network
[net, ~] = train(net,Input_tr, Output_tr);

% Evaluate For Testing Data
y_hat = net(Input_test);
Performance = perform(net, Output_test, y_hat);

% View the Network
% view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)
end